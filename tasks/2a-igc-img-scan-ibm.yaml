apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: igc-img-scan-ibm
  labels:
    version: 0.0.0 
spec:
  params:
    - name: repo-url
      type: string
      description: The git repository url
    - name: revision
      type: string
      description: The branch, tag, or git reference from the git repo-url location
      default: master
    - name: image
      type: string
      description: "The location where to push the image in the form of <server>/<namespace>/<repository>:<tag>"
    - name: source-dir
      type: string
      default: /source
    - default: 'docker.io/node:12-stretch'
      name: js-image
      type: string
    - default: 'docker.io/garagecatalyst/ibmcloud-dev:1.0.10'
      name: tools-image
      type: string
  results:
    - name: image
      description: The url of the image to be pushed
  volumes:
    - name: source
      emptyDir: {}
  steps:
    - name: git-clone
      image: alpine/git
      command: ["/bin/sh"]
      args:
        - -c
        - |
          git clone $(params.repo-url) $(params.source-dir)
          cd $(params.source-dir)
          git checkout $(params.revision)
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: setup
      image: $(params.js-image)
      workingDir: $(params.source-dir)
      command:
        - /bin/bash
      args:
        - '-c'
        - >
          set -x 

          set +e 

          git fetch origin ${BRANCH} --tags 

          git checkout ${BRANCH}

          echo "IMAGE NAME - Setup " 

          echo "IMAGE_VERSION1=$(git describe --abbrev=0 --tags)"  >
          ./env-config  

          echo "IMAGE_NAME1=$(basename -s .git `git config --get
          remote.origin.url` | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')" >>
          ./env-config  

          source ./env-config    

          echo ${IMAGE_VERSION1}  

          echo ${IMAGE_NAME1}   

          if [[ -z "${IMAGE_VERSION1}" ]]; then
              echo "Error: IMAGE_VERSION not defined"
              exit 1
          fi  

          if [[ -z "${IMAGE_NAME1}" ]]; then
              echo "Error: IMAGE_NAME not defined"
              exit 1
          fi
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: va-scan
      image: $(params.tools-image)
      workingDir: $(params.source-dir)
      command:
        - /bin/bash
      env:
        - name: HOME
          value: /home/devops
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              key: REGISTRY_USER
              name: ibmcloud-apikey
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              key: APIKEY
              name: ibmcloud-apikey
              optional: true
      envFrom:
        - configMapRef:
            name: ibmcloud-config
        - secretRef:
            name: ibmcloud-apikey
      args:
        - '-c'
        - >
          set -e 

          . ./env-config 

          echo "REGISTRYURL + ${REGISTRY_URL}" 

          IMAGE_URL=$(params.image)

          echo ${IMAGE_URL}

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}') 

          echo ${REGISTRY_URL}

          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}') 

          echo -e "VA Security Scan image in regisry " 

          echo "Registr URL"  

          echo
          ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME1}:${IMAGE_VERSION1}

          URL=${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME1}:${IMAGE_VERSION1}

          ibmcloud login --apikey ${REGISTRY_PASSWORD} -g ${RESOURCE_GROUP} -r
          ${REGION} 

          ibmcloud cr namespace-list

          echo ${URL}

          sleep 2m

          VA_FLAG=$(ibmcloud cr va ${URL} --output json | grep OK)

          echo ${VA_FLAG} 

          if [[ -n "${VA_FLAG}" ]]; then
            echo "VA - No Issues in the image"
          else 
            echo "VA - Issues in the image"
            ibmcloud cr va ${URL} --output json
          fi

          echo -n "${URL}" | tee $(results.image.path)
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
