apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-img-scan-ibm
  labels:
    version: 0.0.0 
spec:
  params:
    - name: git-url
      type: string
      description: The git repository url
    - name: revision
      description: The git reference that was checked out
    - name: image-url
      type: string
      description: "The location where to push the image in the form of <server>/<namespace>/<repository>:<tag>"
    - name: image-name
      type: string
      description: The name of the application
    - name: source-dir
      type: string
      default: /source
    - default: 'docker.io/node:12-stretch'
      name: js-image
      type: string
    - default: 'docker.io/garagecatalyst/ibmcloud-dev:1.0.10'
      name: tools-image
      type: string
  volumes:
    - name: source
      emptyDir: {}
  steps:
    - name: git-clone
      image: alpine/git
      command: ["/bin/sh"]
      args:
        - -c
        - |
          git clone $(params.git-url) $(params.source-dir)
          cd $(params.source-dir)

          git reset --hard $(params.revision)

          echo ""
          echo "REVISION: $(params.revision)"
          echo "SOURCE_DIR: $(params.source-dir)"
          echo "IMAGE_URL: $(params.image-url)"
          echo "IMAGE_NAME: $(params.image-name)"
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: va-scan
      image: $(params.tools-image)
      workingDir: $(params.source-dir)
      command:
        - /bin/bash
      env:
        - name: HOME
          value: /home/devops
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              key: REGISTRY_USER
              name: ibmcloud-apikey
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              key: APIKEY
              name: ibmcloud-apikey
              optional: true
      envFrom:
        - configMapRef:
            name: ibmcloud-config
        - secretRef:
            name: ibmcloud-apikey
      args:
        - '-c'
        - >
          IMAGE_URL=$(params.image-url)

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')

          echo -e "VA Security Scan image in registry"

          echo "Registry URL: ${REGISTRY_URL}"

          if [[ "${REGISTRY_URL}" =~ icr.io ]]; then
            ibmcloud login --apikey ${REGISTRY_PASSWORD} -g ${RESOURCE_GROUP} -r ${REGION}

            ibmcloud cr namespace-list

            echo "Getting the VA status of ${IMAGE_URL}"

            sleep 2m

            ibmcloud cr va ${IMAGE_URL} --output json > va-result.json
            VA_STATUS=$(cat va-result.json | jq -r '.[].status')

            echo "VA scan status: ${VA_STATUS}"

            if [[ "${VA_STATUS}" == "OK" ]]; then
              echo "VA - No Issues in the image"
            else if [[ $(cat va-result.json | jq -r '.[].vulnerabilities | length') -gt 0 ]]; then
              echo "VA Failure: $(cat va-result.json | jq -r '.[].vulnerabilities | length') vulnerabilities found in the image"
              cat va-result.json | jq -r '.[].vulnerabilities'
              exit 1
            else if [[ $(cat va-result.json | jq -r '.[].configuration_issues | length') -gt 0 ]]; then
              echo "VA Warning - $(cat va-result.json | jq -r '.[].configuration_issues | length') configuration issues found in the image"
              cat va-result.json | jq -r '.[].configuration_issues'
            else
              echo "VA Warning: non-OK status from Vulnerability Advisor ${VA_STATUS}"
              cat va-result.json | jq -r '.[]'
            fi
          else
            echo "The image is not stored in the IBM Cloud Image Registry. Skipping Vulnerability Advisor validation"
          fi
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
