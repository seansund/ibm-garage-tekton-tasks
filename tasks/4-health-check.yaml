apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: igc-health-check
  labels:
    version: 0.0.0
spec:
  params:
    - name: git-url
      type: string
      description: The git repository url
    - name: revision
      description: The git reference that was checked out
    - name: image-url
      type: string
      description: "The location where to push the image in the form of <server>/<namespace>/<repository>:<tag>"
      default: ""
    - name: image-name
      type: string
      description: The name of the image/application that should be used for the pipeline
      default: ""
    - name: source-dir
      type: string
      default: /source
    - name: js-image
      type: string
      default: docker.io/node:12-stretch
    - name: tools-image
      type: string
      default: garagecatalyst/ibmcloud-dev:1.0.10
  volumes:
    - name: source
      emptyDir: {}
  steps:
    - name: git-clone
      image: alpine/git
      command: ["/bin/sh"]
      args:
        - -c
        - |
          git clone $(params.git-url) $(params.source-dir)
          cd $(params.source-dir)

          git reset --hard $(params.revision)

          echo ""
          echo "REVISION: $(params.revision)"
          echo "SOURCE_DIR: $(params.source-dir)"
          echo "IMAGE_URL: $(params.image-url)"
          echo "IMAGE_NAME: $(params.image-name)"
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: health-check
      image: $(params.tools-image)
      workingdir: $(params.source-dir)
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      envFrom:
        - configMapRef:
            name: ibmcloud-config
      command: ["/bin/bash"]
      args:
        - -c
        - |
          ENVIRONMENT_NAME="${NAMESPACE}"
          IMAGE_NAME=$(params.image-name)

          if [[ "${CLUSTER_TYPE}" == "openshift" ]]; then
              PROTOCOL="https"
              HOST=$(kubectl get route/${IMAGE_NAME} --namespace ${ENVIRONMENT_NAME} --output=jsonpath='{ .spec.host }')
          else
              PROTOCOL="http"
              INGRESS_HOST=$(kubectl get ingress/${IMAGE_NAME} --namespace ${ENVIRONMENT_NAME} --output=jsonpath='{ .spec.rules[0].host }')
          fi

          URL="${PROTOCOL}://${HOST}"

          sleep_countdown=5

          # sleep for 10 seconds to allow enough time for the server to start
          sleep 10
          echo "Health check start"
          while [[ $(curl -sL -w "%{http_code}\\n" "${URL}/health" -o /dev/null --connect-timeout 3 --max-time 5 --retry 3 --retry-max-time 30) != "200" ]]; do
              sleep 30
              echo "Health check failure. Remaining retries: $sleep_countdown"
              sleep_countdown=$((sleep_countdown-1))
              if [[ $sleep_countdown -eq 0 ]]; then
                      echo "Could not reach health endpoint: ${URL}/health"
                      exit 1;
              fi
          done

          echo "Successfully reached health endpoint: ${URL}/health"
          echo "====================================================================="
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
