apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: igc-java-gradle-test
  labels:
    version: 0.0.0
spec:
  params:
    - name: repo-url
      type: string
      description: The git repository url
    - name: revision
      type: string
      description: The branch, tag, or git reference from the git repo-url location
      default: master
    - name: image
      type: string
      description: "The location where to push the image in the form of <server>/<namespace>/<repository>:<tag>"
    - name: source-dir
      type: string
      default: /source
    - name: gradle-image
      type: string
      default: gradle:jdk11
    - name: sonarqube-cli
      type: string
      default: sonarsource/sonar-scanner-cli
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    env:
      - name: GRADLE_USER_HOME
        value: $(params.source-dir)
  steps:
    - name: git-clone
      image: alpine/git
      command: ["/bin/sh"]
      args:
        - -c
        - |
          git clone $(params.repo-url) $(params.source-dir)
          cd $(params.source-dir)
          git checkout $(params.revision)
          echo "IMAGE_NAME=$(basename $(git rev-parse --show-toplevel))" >> ./.env-config
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: build
      image: $(params.gradle-image)
      workingdir: $(params.source-dir)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          ./gradlew assemble --no-daemon
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: test
      image: $(params.gradle-image)
      workingdir: $(params.source-dir)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          ./gradlew testClasses --no-daemon
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: sonar-scan
      image: $(params.sonarqube-cli)
      workingdir: $(params.source-dir)
      envFrom:
        - configMapRef:
            name: sonarqube-config
            optional: true
        - secretRef:
            name: sonarqube-access
            optional: true
      env:
        - name: SONAR_USER_HOME
          value: $(params.revision)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          . ./.env-config

          if ! command -v sonar-scanner &> /dev/null
          then
              echo "Skipping SonarQube step, no task defined"
              exit 0
          fi

          if [ -n "${SONARQUBE_URL}" ]; then

            sonar-scanner -X \
            -Dsonar.login=${SONARQUBE_USER} \
            -Dsonar.password=${SONARQUBE_PASSWORD} \
            -Dsonar.host.url=${SONARQUBE_URL} \
            -Dsonar.projectKey=${IMAGE_NAME}

          else
              echo "Skipping Sonar Qube step for now but include"
          fi
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
