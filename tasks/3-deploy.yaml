apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: igc-deploy
  labels:
    version: 0.0.0
spec:
  params:
    - name: repo-url
      type: string
      description: The git repository url
    - name: revision
      type: string
      description: The branch, tag, or git reference from the git repo-url location
      default: master
    - name: image
      type: string
      description: "The location where to push the image in the form of <server>/<namespace>/<repository>:<tag>"
    - name: source-dir
      type: string
      default: /source
    - name: js-image
      type: string
      default: docker.io/node:12-stretch
    - name: tools-image
      type: string
      default: garagecatalyst/ibmcloud-dev:1.0.10
  volumes:
    - name: source
      emptyDir: {}
  steps:
    - name: git-clone
      image: alpine/git
      command: ["/bin/sh"]
      args:
        - -c
        - |
          git clone $(params.repo-url) $(params.source-dir)
          cd $(params.source-dir)
          git checkout $(params.revision)
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: setup
      image: $(params.js-image)
      workingdir: $(params.source-dir)
      command: ["/bin/bash"]
      env:
        - name: BRANCH
          value: $(params.revision)
      args:
        - -c
        - |
          set -x
          set +e

          git fetch --unshallow
          git fetch --tags
          git tag -l

          git checkout ${BRANCH}

          echo "IMAGE_VERSION=$(git describe --abbrev=0 --tags)" > ./env-config
          echo "IMAGE_NAME=$(basename -s .git `git config --get remote.origin.url` | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')" >> ./env-config
          echo "REPO_URL=$(git config --get remote.origin.url)" >> ./env-config

          source ./env-config
          if [[ -z "${IMAGE_VERSION}" ]]; then
              echo "Error: IMAGE_VERSION not defined"
              exit 1
          fi
          if [[ -z "${IMAGE_NAME}" ]]; then
              echo "Error: IMAGE_NAME not defined"
              exit 1
          fi
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: deploy
      image: $(params.tools-image)
      workingdir: $(params.source-dir)
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: BRANCH
          value: $(params.revision)
      envFrom:
        - configMapRef:
            name: ibmcloud-config
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          . ./env-config

          ENVIRONMENT_NAME="${NAMESPACE}"

          IMAGE_URL=$(params.image)

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')
          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')

          echo "REGISTRY_URL: $REGISTRY_URL"
          echo "REGISTRY_NAMESPACE: $REGISTRY_NAMESPACE"
          echo "IMAGE_NAME: $IMAGE_NAME"
          echo "IMAGE_VERSION: $IMAGE_VERSION"

          export CHART_ROOT=$(find . -name chart)
          echo "CHART_ROOT: $CHART_ROOT"

          export CHART=$(find . -name Chart*.yaml)
          echo "CHART: $CHART"

          export CHART_NAME=$(cat $CHART | awk '/name:/ {print $2}')
          echo "CHART_NAME: $CHART_NAME"

          # Update Chart name and version
          if [[ "${CHART_NAME}" != "${IMAGE_NAME}" ]]; then
            echo "Renaming chart from ${CHART_NAME} to ${IMAGE_NAME}"
            cp -R "${CHART_ROOT}/${CHART_NAME}" "${CHART_ROOT}/${IMAGE_NAME}"
            cat "${CHART_ROOT}/${CHART_NAME}/Chart.yaml" | \
                yq w - apiVersion "v1" | \
                yq w - name "${IMAGE_NAME}" | \
                yq w - version "${IMAGE_VERSION}" > "${CHART_ROOT}/${IMAGE_NAME}/Chart.yaml"
          else
            echo "Chart name and image name match: ${IMAGE_NAME}"
          fi

          CHART_PATH="${CHART_ROOT}/${IMAGE_NAME}"

          RELEASE_NAME="${IMAGE_NAME}"
          echo "RELEASE_NAME: $RELEASE_NAME"

          echo "INITIALIZING helm with client-only (no Tiller)"
          helm init --client-only 1> /dev/null 2> /dev/null
          echo $(helm version --client)

          echo "CHECKING CHART (lint)"
          helm lint ${CHART_PATH}

          IMAGE_REPOSITORY="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}"

          INGRESS_ENABLED=true
          ROUTE_ENABLED=false
          if [[ "${CLUSTER_TYPE}" == "openshift" ]]; then
            INGRESS_ENABLED=false
            ROUTE_ENABLED=true
          fi

          # Update helm chart with repository and tag values
          cat ${CHART_PATH}/values.yaml | \
              yq w - nameOverride "${IMAGE_NAME}" | \
              yq w - fullnameOverride "${IMAGE_NAME}" | \
              yq w - vcsInfo.repoUrl "${REPO_URL}" | \
              yq w - vcsInfo.branch "${BRANCH}" | \
              yq w - image.repository "${IMAGE_REPOSITORY}" | \
              yq w - image.tag "${IMAGE_VERSION}" | \
              yq w - ingress.enabled "${INGRESS_ENABLED}" | \
              yq w - route.enabled "${ROUTE_ENABLED}" > ./values.yaml.tmp
          cp ./values.yaml.tmp ${CHART_PATH}/values.yaml
          cat ${CHART_PATH}/values.yaml

          # Using 'upgrade --install" for rolling updates. Note that subsequent updates will occur in the same namespace the release is currently deployed in, ignoring the explicit--namespace argument".
          helm template ${CHART_PATH} \
              --name ${RELEASE_NAME} \
              --namespace ${ENVIRONMENT_NAME} \
              --set ingress.tlsSecretName="${TLS_SECRET_NAME}" \
              --set ingress.subdomain="${INGRESS_SUBDOMAIN}" > ./release.yaml

          echo -e "Generated release yaml for: ${ENVIRONMENT_NAME}/${IMAGE_NAME}"
          cat ./release.yaml

          echo -e "Deploying into: ${ENVIRONMENT_NAME}/${IMAGE_NAME}"
          kubectl apply -n ${ENVIRONMENT_NAME} -f ./release.yaml --validate=false
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
