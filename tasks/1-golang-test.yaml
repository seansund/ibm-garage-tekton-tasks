apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: igc-golang-test
  annotations:
    description: Executes build, test, and sonarscan logic for a Golang application
  labels:
    version: 0.0.0
spec:
  params:
    - name: repo-url
      description: The git repository url
    - name: revision
      description: The branch, tag, or git reference from the git repo-url location
      default: master
    - name: source-dir
      type: string
      default: /source
    - name: golang-image
      type: string
      default: golang:stretch
    - name: sonarqube-cli
      type: string
      default: sonarsource/sonar-scanner-cli
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    envFrom:
      - configMapRef:
          name: pactbroker-config
          optional: true
  steps:
    - name: Git clone
      image: alpine/git
      command: ["/bin/bash"]
      args:
        - -c
        - |
          git clone $(params.repo-url) $(params.source-dir)
          cd $(params.source-dir)
          git checkout $(params.revision)
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: build
      image: $(params.golang-image)
      workingdir: $(params.revision)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          go build ./...
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: test
      image: $(params.golang-image)
      workingdir: $(params.revision)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          go test ./...
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: sonar-scan
      image: $(params.sonarqube-cli)
      workingdir: $(params.revision)
      envFrom:
        - configMapRef:
            name: sonarqube-config
            optional: true
        - secretRef:
            name: sonarqube-access
            optional: true
      env:
        - name: SONAR_USER_HOME
          value: $(params.revision)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          if ! command -v sonar-scanner &> /dev/null
          then
              echo "Skipping SonarQube step, no task defined"
              exit 0
          fi

          if [ -n "${SONARQUBE_URL}" ]; then

            sonar-scanner \
            -Dsonar.login=${SONARQUBE_USER} \
            -Dsonar.password=${SONARQUBE_PASSWORD} \
            -Dsonar.host.url=${SONARQUBE_URL}

          else
              echo "Skipping Sonar Qube step for now but include"
          fi
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)