apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-img-release
  annotations:
    description: Tags the git repository and releases the intermediate container image with the version tag
    app.openshift.io/description: Tags the git repository and releases the intermediate container image with the version tag
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: git-url
      type: string
      description: The git repository url
    - name: revision
      description: The git reference that was checked out
    - name: image-url
      type: string
      description: "The location where to push the image in the form of <server>/<namespace>/<repository>:<tag>"
    - name: app-name
      type: string
      description: The name of the image for the application
    - name: source-dir
      type: string
      default: /source
    - name: js-image
      type: string
      default: node:12-stretch
    - name: tools-image
      type: string
      default: garagecatalyst/ibmcloud-dev:1.0.10
    - name: BUILDER_IMAGE
      type: string
      default: quay.io/containers/skopeo:v1.1.0
    - name: TLSVERIFY
      type: string
      default: "false"
  results:
    - name: image-url
      description: The url of the image to be pushed
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: source
      emptyDir: {}
  steps:
    - name: git-clone
      image: alpine/git
      command: ["/bin/sh"]
      args:
        - -c
        - |
          git clone $(params.git-url) $(params.source-dir)
          cd $(params.source-dir)

          git reset --hard $(params.revision)

          echo ""
          echo "REVISION: $(params.revision)"
          echo "SOURCE_DIR: $(params.source-dir)"
          echo "IMAGE_URL: $(params.image-url)"
          echo "IMAGE_NAME: $(params.app-name)"
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: git-tag
      image: $(params.js-image)
      workingdir: $(params.source-dir)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          git fetch --tags

          git config --global user.email "cloud-native-toolkit@example.com"
          git config --global user.name "Cloud Native Toolkit Pipeline"

          if [[ $(git describe --tag `git rev-parse HEAD`) =~ (^[0-9]+.[0-9]+.[0-9]+$) ]]; then
              echo "Latest commit is already tagged"
              echo "IMAGE_NAME=$(basename -s .git `git config --get remote.origin.url` | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')" > ./.env-config
              echo "IMAGE_VERSION=$(git describe --abbrev=0 --tags)" >> ./.env-config
              exit 0
          fi

          mkdir -p ~/.npm
          npm config set prefix ~/.npm
          export PATH=$PATH:~/.npm/bin
          npm i -g release-it

          release-it patch ${PRE_RELEASE} \
            --ci \
            --no-npm \
            --no-git.push \
            --no-git.requireCleanWorkingDir \
            --verbose \
            -VV

          git push --follow-tags -v

          echo "IMAGE_VERSION=$(git describe --abbrev=0 --tags)" >> ./.env-config

          source ./.env-config
          if [[ -z "${IMAGE_VERSION}" ]]; then
              echo "Error: IMAGE_VERSION not defined"
              exit 1
          fi
          if [[ -z "${IMAGE_NAME}" ]]; then
              echo "Error: IMAGE_NAME not defined"
              exit 1
          fi
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: image-tag
      image: $(params.BUILDER_IMAGE)
      workingdir: $(params.source-dir)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          . ./.env-config

          IMAGE_URL=$(params.image-url)
          IMAGE_NAME=$(params.app-name)

          if [[ -z "${REGISTRY_URL}" ]]; then
            REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')
          fi
          if [[ -z "${REGISTRY_NAMESPACE}" ]]; then
            REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')
          fi

          BASE_IMAGE="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}"
          APP_IMAGE="${BASE_IMAGE}:${IMAGE_VERSION}"

          echo "Tagging ${IMAGE_URL} as ${APP_IMAGE}"

          if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]]; then
            skopeo login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "${REGISTRY_URL}"
          fi
          skopeo copy docker://${IMAGE_URL} docker://${APP_IMAGE}

          echo -n "${APP_IMAGE}" | tee $(results.image-url.path)
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: ibmcloud-apikey
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ibmcloud-apikey
              key: APIKEY
              optional: true
        - name: REGISTRY_URL
          valueFrom:
            secretKeyRef:
              name: ibmcloud-config
              key: REGISTRY_URL
              optional: true
        - name: REGISTRY_NAMESPACE
          valueFrom:
            secretKeyRef:
              name: ibmcloud-config
              key: REGISTRY_NAMESPACE
              optional: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - name: source
          mountPath: $(params.source-dir)
      securityContext:
        privileged: true
