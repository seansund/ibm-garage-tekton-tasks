apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: igc-nodejs-test
  labels:
    version: 0.0.0
spec:
  params:
    - name: repo-url
      type: string
      description: The git repository url
    - name: revision
      type: string
      description: The branch, tag, or git reference from the git repo-url location
      default: master
    - name: image
      type: string
      description: "The location where to push the image in the form of <server>/<namespace>/<repository>:<tag>"
    - name: source-dir
      type: string
      default: /source
    - name: js-image
      type: string
      default: node:12-stretch
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    envFrom:
      - configMapRef:
          name: pactbroker-config
          optional: true
  steps:
    - name: git-clone
      image: alpine/git
      command: ["/bin/sh"]
      args:
        - -c
        - |
          git clone $(params.repo-url) $(params.source-dir)
          cd $(params.source-dir)
          git checkout $(params.revision)
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: build
      image: $(params.js-image)
      workingdir: $(params.source-dir)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          npm install
          if [ -d client ]; then
            pushd client
            npm install
            popd
          fi
          npm run build --if-present
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: test
      image: $(params.js-image)
      workingdir: $(params.source-dir)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          CI=true npm test
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: publish-pact
      image: $(params.js-image)
      workingdir: $(params.source-dir)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          if [ -n "${PACTBROKER_URL}" ]; then
              npm run pact:publish --if-present
          else 
              echo "Skipping Pact publish"
          fi
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: verify-pact
      image: $(params.js-image)
      workingdir: $(params.source-dir)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          if [ -n "${PACTBROKER_URL}" ]; then
              npm run pact:verify --if-present
          else 
              echo "Skipping Pact publish"
          fi
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: sonar-scan
      image: $(params.js-image)
      workingdir: $(params.source-dir)
      envFrom:
        - configMapRef:
            name: sonarqube-config
            optional: true
        - secretRef:
            name: sonarqube-access
            optional: true
      env:
        - name: SONAR_USER_HOME
          value: $(params.source-dir)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          if [ -n "${SONARQUBE_URL}" ]; then
              npm run sonarqube:scan --if-present
          else 
              echo "Skipping Sonar Qube step"
          fi
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
