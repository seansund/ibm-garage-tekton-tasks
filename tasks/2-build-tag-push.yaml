apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-build-tag-push
  annotations:
    description: Executes logic to build, tag and push a container image using the intermediate sha tag to the image-url
    app.openshift.io/description: Executes logic to build, tag and push a container image using the intermediate sha tag to the image-url
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: git-url
      type: string
      description: The git repository url
    - name: revision
      description: The git reference that was checked out
    - name: image-url
      type: string
      description: "The location where to push the image in the form of <server>/<namespace>/<repository>:<tag>"
      default: ""
    - name: app-name
      type: string
      description: The name of the image/application that should be used for the pipeline
      default: ""
    - name: source-dir
      type: string
      default: /source
    - name: js-image
      type: string
      default: docker.io/node:12-stretch
    - name: BUILDER_IMAGE
      type: string
      default: quay.io/buildah/stable:v1.11.0
    - name: DOCKERFILE
      type: string
      default: ./Dockerfile
    - name: CONTEXT
      type: string
      default: .
    - name: TLSVERIFY
      type: string
      default: "false"
  results:
    - name: image-url
      description: The url of the image to be pushed
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: source
      emptyDir: {}
  steps:
    - name: git-clone
      image: alpine/git
      command: ["/bin/sh"]
      args:
        - -c
        - |
          git clone $(params.git-url) $(params.source-dir)
          cd $(params.source-dir)

          git reset --hard $(params.revision)

          echo ""
          echo "REVISION: $(params.revision)"
          echo "SOURCE_DIR: $(params.source-dir)"
          echo "IMAGE_URL: $(params.image-url)"
          echo "IMAGE_NAME: $(params.app-name)"
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingdir: $(params.source-dir)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          IMAGE_URL=$(params.image-url)

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')
          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')

          APP_IMAGE="${IMAGE_URL}"

          echo "Building image: ${APP_IMAGE}"

          buildah bud --tls-verify=$(params.TLSVERIFY) --format=docker -f $(params.DOCKERFILE) -t ${APP_IMAGE}  $(params.CONTEXT)
          if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ "${REGISTRY_URL}" != "image-registry.openshift-image-registry.svc:5000" ]]; then; then
            buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "${REGISTRY_URL}"
          fi
          buildah push --tls-verify=$(params.TLSVERIFY) "${APP_IMAGE}" "docker://${APP_IMAGE}"

          echo -n "${APP_IMAGE}" | tee $(results.image-url.path)
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: ibmcloud-apikey
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ibmcloud-apikey
              key: APIKEY
              optional: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - name: source
          mountPath: $(params.source-dir)
      securityContext:
        privileged: true
