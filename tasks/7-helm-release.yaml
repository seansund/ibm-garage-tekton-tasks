apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-helm-package
  annotations:
    description: Publishes the helm chart to the helm repository using the version provided in the image-url
    app.openshift.io/description: Publishes the helm chart to the helm repository using the version provided in the image-url
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 0.0.0
spec:
  params:
    - name: git-url
      type: string
      description: The git repository url
    - name: revision
      description: The git reference that was checked out
    - name: image-url
      type: string
      description: "The location where to push the image in the form of <server>/<namespace>/<repository>:<tag>"
    - name: app-name
      type: string
      description: "The location where to push the image in the form of <server>/<namespace>/<repository>:<tag>"
      default: ""
    - name: source-dir
      type: string
      default: /source
    - name: js-image
      type: string
      default: node:12-stretch
    - name: tools-image
      type: string
      default: garagecatalyst/ibmcloud-dev:1.0.10
  results:
    - name: helm-url
      description: The url of the helm repository
  volumes:
    - name: source
      emptyDir: {}
  steps:
    - name: git-clone
      image: alpine/git
      command: ["/bin/sh"]
      args:
        - -c
        - |
          git clone $(params.git-url) $(params.source-dir)
          cd $(params.source-dir)

          git reset --hard $(params.revision)

          echo ""
          echo "REVISION: $(params.revision)"
          echo "SOURCE_DIR: $(params.source-dir)"
          echo "IMAGE_URL: $(params.image-url)"
          echo "IMAGE_NAME: $(params.app-name)"
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: deploy
      image: $(params.tools-image)
      workingdir: $(params.source-dir)
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: BRANCH
          value: $(params.revision)
      envFrom:
        - configMapRef:
            name: ibmcloud-config
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          ENVIRONMENT_NAME="${NAMESPACE}"

          IMAGE_URL=$(params.image-url)

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')
          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')
          IMAGE_TAG=$(echo $IMAGE_URL | awk -F / '{print $3}')
          IMAGE_NAME=$(echo $IMAGE_TAG | awk -F : '{print $1}')
          IMAGE_VERSION=$(echo $IMAGE_TAG | awk -F : '{print $2}')

          echo "REGISTRY_URL=$REGISTRY_URL" >> ./.env-config
          echo "REGISTRY_NAMESPACE=$REGISTRY_NAMESPACE" >> ./.env-config
          echo "IMAGE_NAME=$IMAGE_NAME" >> ./.env-config
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> ./.env-config

          cat ./.env-config

          export CHART_ROOT=$(find . -name chart)
          echo "CHART_ROOT: $CHART_ROOT"

          export CHART=$(find . -name Chart*.yaml)
          echo "CHART: $CHART"

          export CHART_NAME=$(cat $CHART | awk '/name:/ {print $2}')
          echo "CHART_NAME: $CHART_NAME"

          # Update Chart name and version
          if [[ "${CHART_NAME}" != "${IMAGE_NAME}" ]]; then
            echo "Renaming chart from ${CHART_NAME} to ${IMAGE_NAME}"
            cp -R "${CHART_ROOT}/${CHART_NAME}" "${CHART_ROOT}/${IMAGE_NAME}"
            cat "${CHART_ROOT}/${CHART_NAME}/Chart.yaml" | \
                yq w - apiVersion "v1" | \
                yq w - name "${IMAGE_NAME}" | \
                yq w - version "${IMAGE_VERSION}" > "${CHART_ROOT}/${IMAGE_NAME}/Chart.yaml"
          else
            echo "Chart name and image name match: ${IMAGE_NAME}"
          fi

          CHART_PATH="${CHART_ROOT}/${IMAGE_NAME}"

          echo ""
          echo "Chart ${CHART_PATH}"
          cat ${CHART_PATH}/Chart.yaml

          RELEASE_NAME="${IMAGE_NAME}"
          echo "RELEASE_NAME: $RELEASE_NAME"

          echo "INITIALIZING helm with client-only (no Tiller)"
          helm init --client-only 1> /dev/null 2> /dev/null
          echo $(helm version --client)

          IMAGE_REPOSITORY="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}"

          INGRESS_ENABLED=true
          ROUTE_ENABLED=false
          if [[ "${CLUSTER_TYPE}" == "openshift" ]]; then
            INGRESS_ENABLED=false
            ROUTE_ENABLED=true
          fi

          # Update helm chart with repository and tag values
          cat ${CHART_PATH}/values.yaml | \
              yq w - nameOverride "${IMAGE_NAME}" | \
              yq w - fullnameOverride "${IMAGE_NAME}" | \
              yq w - vcsInfo.repoUrl "${REPO_URL}" | \
              yq w - vcsInfo.branch "${BRANCH}" | \
              yq w - image.repository "${IMAGE_REPOSITORY}" | \
              yq w - image.tag "${IMAGE_VERSION}" | \
              yq w - ingress.enabled "${INGRESS_ENABLED}" | \
              yq w - route.enabled "${ROUTE_ENABLED}" > ./values.yaml.tmp
          cp ./values.yaml.tmp ${CHART_PATH}/values.yaml
          cat ${CHART_PATH}/values.yaml

          echo "CHECKING CHART (lint)"
          helm lint ${CHART_PATH}
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
    - name: helm-chart
      image: $(params.tools-image)
      workingdir: $(params.source-dir)
      envFrom:
        - configMapRef:
            name: artifactory-config
            optional: true
        - secretRef:
            name: artifactory-access
            optional: true
        - configMapRef:
            name: helm-config
            optional: true
        - secretRef:
            name: helm-access
            optional: true
      env:
        - name: BRANCH
          value: $(image.revision)
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          source ./.env-config

          if [[ -z "${HELM_URL}" ]] && [[ -z "${HELM_USER}" ]]; then
            if [[ -z "${ARTIFACTORY_URL}" ]]; then
              echo "It looks like Artifactory has not been installed (ARTIFACTORY_URL from artifactory-config config map is missing). Skipping step."
              exit 0
            fi

            if [[ -z "${ARTIFACTORY_USER}" ]] || [[ -z "${ARTIFACTORY_PASSWORD}" ]]; then
              echo "Something's wrong... The Artifactory url is configured but the Artifactory credentials cannot be found. Check your artifactory-access secret."
              exit 1
            fi

            if [[ -z "${ARTIFACTORY_ENCRYPT}" ]]; then
                echo "It looks like your Artifactory installation is not complete. Please complete the steps found here - http://ibm.biz/complete-setup"
                exit 1
            fi

            echo "Check if a Generic Local Repo has been created and retrieve the URL for it"
            export URL=$(curl -s -u${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} -X GET "${ARTIFACTORY_URL}/artifactory/api/repositories?type=LOCAL" | jq -r '.[0].url')
            echo "Helm repo url: ${URL}"

            # Check if the URL is valid and we can continue
            if [ -n "${URL}" ]; then
                echo "Successfully read Repo ${URL}"
                HELM_URL=${URL}
                HELM_USER=${ARTIFACTORY_USER}
                HELM_PASSWORD=${ARTIFACTORY_PASSWORD}
            else
                echo "No Repository Created"
                exit 1;
            fi
          fi

          IMAGE_URL=$(params.image-url)

          export CHART_ROOT=$(find . -name chart)
          echo "CHART_ROOT: $CHART_ROOT"

          export CHART_NAME="${IMAGE_NAME}"
          echo "CHART_NAME: $CHART_NAME"

          CHART_PATH="${CHART_ROOT}/${CHART_NAME}"

          # Package Helm Chart
          helm package --version ${IMAGE_VERSION} ${CHART_PATH}

          # Get the index and re index it with current Helm Chart
          curl -u${HELM_USER}:${HELM_PASSWORD} -O "${HELM_URL}/${REGISTRY_NAMESPACE}/index.yaml"

          apiVersion=$(grep apiVersion ./index.yaml | sed -E "s/apiVersion: (.*)/\1/g")
          if [[ $(cat index.yaml | jq '.errors[0].status') != "404" ]] && [[ -n "${apiVersion}" ]]; then
              # Merge the chart index with the current index.yaml held in Artifactory
              echo "Merging Chart into index.yaml for Chart Repository"
              helm repo index . --url ${HELM_URL}/${REGISTRY_NAMESPACE} --merge index.yaml
          else
              # Dont Merge this is first time one is being created
              echo "Creating a new index.yaml for Chart Repository"
              rm index.yaml
              helm repo index . --url ${HELM_URL}/${REGISTRY_NAMESPACE}
          fi;

          # Persist the Helm Chart in Helm repo for us by ArgoCD
          curl -u${HELM_USER}:${HELM_PASSWORD} -i -vvv -T ${CHART_NAME}-${IMAGE_VERSION}.tgz "${HELM_URL}/${REGISTRY_NAMESPACE}/${CHART_NAME}-${IMAGE_VERSION}.tgz"

          # Persist the Helm Chart in the helm repo for us by ArgoCD
          curl -u${HELM_USER}:${HELM_PASSWORD} -i -vvv -T index.yaml "${HELM_URL}/${REGISTRY_NAMESPACE}/index.yaml"

          echo -n "${HELM_URL}/${REGISTRY_NAMESPACE}" | tee $(results.helm-url.path)
      volumeMounts:
        - name: source
          mountPath: $(params.source-dir)
